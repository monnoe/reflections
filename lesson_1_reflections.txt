1. How did viewing a diff between two versions of a file help you see the bug that was introduced?
windows prompt : fc filename1 filename2
it reduced the number of lines to check, thus limited the ammount of characters to visualize by myself.

2. How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
it can pull out a list of differences between each version, and if necessary, old versions are easily retrieved in order to check/reuse the original content

3. What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pro: you can better define the scope of your changes and history (commits)
Con: sometimes work is still lost due to computer problems (when an automatic save would have been helpful)

4. Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
They do not have the same user application aim. Git sounds like it's for specific programming projects, whereas Google Docs are rather a working tool to share and edit one document in common.

5. How can you use the commands git log and git diff to view the history of files?
GIT LOG within the repository file gives you a summary of the overall history.
GIT DIFF will help you to look closer at the differences existing between two files that interest you

6. How might using version control make you more confident to make changes that could break something?
It makes it easier to trace back to an original working code, even after several changes committed.

7.Now that you have your workspace set up, what do you want to try using Git for?
I want to use GIT to complete my lessons in Machine Learning, and in Deep Learning.  I am hoping that following the advice to use GIT as a working tool will help me to use a new discipline and be successful in my endeavor.

